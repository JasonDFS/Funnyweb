00:0.04 So we've made these changes to our code and we want to save them.
00:3.44 We like it we've already tested it.
00:4.82 We make sure that it runs correctly and we want to put it back into the
00:8.79 code repository. Show with the team ship it in the next version of whatever this
00:13.03 app is. Right. So we can go over here and press this button commit
00:17.67 or the way that I do is I often just use the hotkey I'll just be
00:20.67 sitting here like time to commit 'cmd+k'.
00:22.35 if we go to our file here and we click this button show dif you
00:27.48 get something really interesting remember we saw this def before it said these are the changes
00:32.48 from how it was before and here's what you did to the file.
00:34.98 But notice these little checkboxes here.
00:37.14 These are really cool. We can just if we wanted to just commit this change
00:42.08 but not this change at the moment.
00:43.97 Why would you ever do that?
00:45.84 Well imagine you're working on fixing a bug.
00:49.19 You're making a bunch of changes and you just want to do the minimal amount of
00:52.66 work to make that change for that bug.
00:55.84 Maybe you've done some other stuff here that you want to have a different commit message
00:58.66 You kind of mixed two things together maybe like well this is changing the title
01:3.75 and that was one git hub issue and this is refactoring the way that we
01:8.83 display episode details and that's another one.
01:11.66 You don't want them both to come here because they got up.
01:13.97 You can do cool stuff. Like say this is going to this fixes issue 10
01:20.84 title correction. All right. If we wanted to do that,
01:23.93 we don't want this to come along with it.
01:26.34 But we can go and commit that change And then we come back and now here's
01:30.52 another change. This one is going to be maybe there's another github issue 11
01:34.14 and that fixes number actually will close it on.
01:36.69 Git hub by the way. Go over here.
01:39.32 I want to say refactored display method.
01:44.04 Right. So we can actually make this multiple changes to one file or across multiple
01:48.03 files. Get added to the commits and to get repositories and whatnot by selecting just
01:54.94 different parts. So that's really,
01:56.05 really cool. That said, I almost never do that.
01:58.45 Almost just make the files the changes of the files that I need and then just
02:2.51 commit them and push them all up.
02:4.07 But depending on the type of team you're working on maybe this is really important in
02:7.35 which case that level of detail is great.
02:10.64 Now remember git is a two phase type of operation.
02:16.92 We've made changes. We saved them to the local Git repository but that doesn't actually
02:22.12 mean on Git hub or wherever the servers located.
02:25.15 The changes were made until we push to it.
02:27.94 So we gotta do this next push.
02:31.08 Often I just shift command K.
02:32.96 But however you do it. We pull this up and It'll show us both of
02:36.33 those changes that we've made. So really,
02:38.68 really cool there here we can see that this one,
02:42.14 let's compare the title. Refactored the display method is going to be just this
02:45.98 change and a different commit. Was this one where we fixed the title.
02:50.24 We're going to push both of those changes up to git hub right now and there
02:53.84 there are, we pushed 2 commits up to github and now our code
02:58.62 is pushed up there and saved in a sync and everyone can pick it up and
03:2.2 run with this amazing new feature we've created.
